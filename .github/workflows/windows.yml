name: Windows

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v1

      - name: 下载submodule源码
        run: mv -Force .gitmodules_github .gitmodules && git submodule sync && git submodule update --init

      - name: 配置 vcpkg
        uses: lukka/run-vcpkg@v7
        with:
          vcpkgDirectory: '${{github.workspace}}/vcpkg'
          vcpkgTriplet: x64-windows-static
          # 2025.07.11
          vcpkgGitCommitId: 'efcfaaf60d7ec57a159fc3110403d939bfb69729'
          vcpkgArguments: 'openssl libsrtp[openssl] usrsctp'

      - name: 编译
        uses: lukka/run-cmake@v3
        with:
          useVcpkgToolchainFile: true
          buildDirectory: '${{github.workspace}}/build'
          cmakeAppendedArgs: ''
          cmakeBuildType: 'Release'

      - name: 设置环境变量
        run: |
          $dateString = Get-Date -Format "yyyy-MM-dd"
          $branch = $env:GITHUB_REF -replace "refs/heads/", "" -replace "[\\/\\\?\%\*:\|\x22<>]", "_"
          $branch2 = $env:GITHUB_REF -replace "refs/heads/", ""
          echo "BRANCH=$branch" >> $env:GITHUB_ENV
          echo "BRANCH2=$branch2" >> $env:GITHUB_ENV
          echo "DATE=$dateString" >> $env:GITHUB_ENV

      - name: 打包静态库
        shell: pwsh
        run: |
          $sourceDir = Join-Path $env:GITHUB_WORKSPACE "release/windows/Release"
          if (-not (Test-Path $sourceDir)) {
            Write-Error "目录 $sourceDir 不存在"
          }
          $libs = Get-ChildItem -Path $sourceDir -Filter *.lib
          if (-not $libs) {
            Write-Error "未找到静态库文件 (*.lib)"
          }
          $archivePath = Join-Path $env:GITHUB_WORKSPACE ("release/windows_static_libs_{0}_{1}.zip" -f $env:BRANCH, $env:DATE)
          if (Test-Path $archivePath) {
            Remove-Item $archivePath
          }
          Compress-Archive -Path $libs.FullName -DestinationPath $archivePath

      - name: 创建 Release
        id: create_release
        if: github.event_name != 'pull_request'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: nightly-${{ github.run_id }}
          release_name: Windows ${{ env.BRANCH }} 静态库 ${{ env.DATE }}
          draft: false
          prerelease: true

      - name: 上传静态库到 Release
        if: github.event_name != 'pull_request'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/windows_static_libs_${{ env.BRANCH }}_${{ env.DATE }}.zip
          asset_name: windows_static_libs_${{ env.BRANCH }}_${{ env.DATE }}.zip
          asset_content_type: application/zip
